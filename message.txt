#include <iostream>
#include <string>
#include <Windows.h>
#include <vector>
using namespace std;


class FIO {
	std::string name, surname, lastname;
public:
	FIO() {
		name = "no name";
		surname = "no surname";
		lastname = "no lastname";
	}
	FIO(std::string _name, std::string _surname,
		std::string _lastname) :name(_name), surname(_surname), lastname(_lastname) {}
	FIO(const FIO& a) :name(a.name), surname(a.surname), lastname(a.lastname) {}
	FIO& operator =(FIO& a) {
		if (this != &a) {
			FIO tmp(a);
			this->swap(tmp);
		}
		return *this;
	}
	void swap(FIO& a) {
		std::swap(this->name, a.name);
		std::swap(this->surname, a.surname);
		std::swap(this->lastname, a.lastname);
	}

	friend std::ostream& operator << (std::ostream& out, const FIO& a);
	friend std::istream& operator>>(std::istream& in, FIO& a);
	friend bool operator ==(const FIO& a, const FIO& b) {
		return (a.name == b.name) && (a.surname == b.surname) && (a.lastname == b.lastname);
	}

	string get_name() const {
		return name;
	}
	string get_surname() const {
		return surname;
	}
	string get_lastname() const {
		return lastname;
	}


	FIO& operator=(const FIO& a) {
		name = a.get_name();
		surname = a.get_surname();
		lastname = a.get_lastname();
		return *this;
	}
};

std::ostream& operator << (std::ostream& out, const FIO& a) {
	out << a.name << " " << a.surname << " " << a.lastname;
	return out;
}

std::istream& operator>>(std::istream& input, FIO& a) {
	std::cout << "Input name: ";
	input >> a.name;
	std::cout << "Input surname: ";
	input >> a.surname;
	std::cout << "Input lastname: ";
	input >> a.lastname;
	return input;
}


enum form {YesF, NoF, NoneF};
enum grant {YesG, NoG, NoneG};

class Student {
private:
	FIO fio;
	float mark;
	int num;
	form form_of_education;
	grant grants;
	int id;
public:

	static int last_id;

	Student() {
		mark = 0.0;
		num = 00000000;
		form_of_education = NoneF;
		grants = NoneG;
		id = 0;
	}

	Student(FIO fio, float mark, int num, form form_of_education, grant grants) {
		this->fio = fio;
		this->mark = mark;
		this->num = num;
		this->form_of_education = form_of_education;
		this->grants = grants;
		last_id++;
		id = last_id;
	}

	Student(const Student& student) : fio(student.fio), mark(student.mark), num(student.num),
		form_of_education(student.form_of_education), grants(student.grants)
	{}

	//~Student();

	int get_id() const {
		return id;
	}

	FIO get_fio() const {
		return fio;
	}
	float get_mark() const {
		return mark;
	}
	int get_num() const {
		return num;
	}
	Student& operator=(const Student& student) {
		fio = student.get_fio();
		mark = student.get_mark();
		num = student.get_num();
		id = student.get_id();
		return *this;
	}

	int compare_mark(const Student& st, const Student& st1) {
		if (st.mark > st1.mark) {
			return 1;
		}
		else if (st.mark < st1.mark) {
			return 2;
		}
		else {
			return 0;
		}

	}

	friend ostream& operator<<(ostream& out, const Student& st);

	friend istream& operator>> (istream& in, Student& st);
};

int Student::last_id = 999999;

ostream& operator<<(ostream& out, const Student& st) {
	out << "ФИО: " << st.fio << endl;
	out << "Средний балл: " << st.mark << endl;
	out << "Студенческий билет: " << st.num << endl;
	if (st.form_of_education == YesF) {
		out << "Форма обучения: бюджет" << endl;
	}
	else if (st.form_of_education == NoF) {
		out << "Форма обучения: платка" << endl;
	}
	if (st.grants == YesG) {
		out << "Стипендия" << endl;
	}
	else  if (st.grants == NoG) {
		out << "Нет Стипендия" << endl;
	}
	out << "ID: " << st.id<< endl;

	return out;
}



istream& operator>> (istream& in, Student& st) {

	int n1 = 0;
	int n2 = 0;

	cout << "Введите ФИО студента:" << endl;
	in >> st.fio;
	cout << "Введите средний балл:" << endl;
	in >> st.mark;
	cout << "Введите номер студенческого билета:" << endl;
	in >> st.num;
	cout << "Выбирайте форму обучения(1 - бюджет, 2 - платник):" << endl;
	in >> n1;
	if (n1 == 1) {
		st.form_of_education = YesF;
	}
	else if (n1 == 2) {
		st.form_of_education = NoF;
	}
	cout << "Стипендя(1 - да, 2 - нет):" << endl;
	in >> n2;
	if (n2 == 1) {
		st.grants = YesG;
	}
	else if (n2 == 2) {
		st.grants = NoG;
	}
	return in;
}

class Archive {
	int size;
	int capacity;
	Student* list;
public:
	Archive() : size(0), capacity(5) {
		list = new Student[capacity];
	}
	Archive(int _capacity) :
		size(0), capacity(_capacity)
	{
		list = new Student[capacity];
	}
	Archive(const Archive& s) :
		size(s.size), capacity(s.capacity), list(s.list)
	{}
	~Archive() {
		delete[] list;
		list = nullptr;
	}

	void addS(const Student& s) {
		if (size >= capacity) {
			int new_capacity = capacity * 2;
			Student* new_list = new Student[new_capacity];
			for (int i = 0; i < capacity; i++) {
				new_list[i] = list[i];
			}
			delete[] list;
			list = new_list;
			capacity = new_capacity;
		}
		list[size] = s;
		size++;
	}

	Student* get_list() const {
		return list;
	}

	void Prlist() {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size - i - 1; j++) {
				if (list[j].get_mark() > list[j + 1].get_mark()) {
					Student list1[1];
					list1[0] = list[j];
					list[j] = list[j + 1];
					list[j + 1] = list1[0];
				}
			}
		}
		for (int i = 0; i < size; i++) {
			cout << "\n" << i + 1 << ") " << list[i];
		}
	}

	int get_size() {
		return size;
	}

};



int main() {
	SetConsoleCP(1251);
	SetConsoleOutputCP(1251);
	setlocale(LC_ALL, "russian");
	Student S;
	Archive Students;
	Student s1(FIO("Alex", "Alex", "Alex"), 2.2, 1412412, YesF, YesG);
	//Student s2;
	//cin >> s2;
	/*cout << s1 << endl;*/
	//cout << s2 << endl;

	//Students.addS(s1);
	//Students.Prlist();
	int choose = 0;
	int num = 0;
	int num1 = 0;
	while (true) {
		cout << "Выбирайте действие:\n1. Добавить студента\n2. Посмотреть таблицу\n3. Удалить\n4. Exit\n";
		cin >> choose;
		system("cls");
		switch (choose) {
		case 1:
			cin >> S;
			Students.addS(S);
			choose = 0;
			system("cls");
			break;
		case 2:
			Students.Prlist();
			cout << "\n";
			system("pause");
			choose = 0;
			system("cls");
			break;
		case 3:
			std::cout << "Input index: ";
			std::cin >> num1;;
			//F.remove(num1);
			choose = 0;
			break;
		case 4:
			return 0;
		}
		system("cls");
	}
	cout << "See you soon.";
	return 0;


}